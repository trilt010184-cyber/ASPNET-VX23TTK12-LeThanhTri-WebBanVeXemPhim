@page "/admin/ves"
@page "/admin"
@inherits OwningComponentBase<IdailyphongveRepository>
<table class="table table-sm table-striped table-bordered">
<thead>
<tr>
<th>ID</th>
<th>Title</th>
<th>Image</th>
<th>Genre</th>
<th>Price</th>
<td />
</tr>
</thead><tbody>
@if (veData?.Count() > 0)
{
@foreach (ve b in veData)
{
<tr>
<td>@b.veID</td>
<td>@b.Title</td>
<td><img src="@b.ProfilePicture" height="50" width="50"> </td>
<td>@b.Genre</td>
<td>@b.Price.ToString("c")</td>
<td>
<NavLink class="btn btn-info btn-sm"
href="@GetDetailsUrl(b.veID)">
Details</NavLink>
<NavLink class="btn btn-warning btn-sm"
href="@GetEditUrl(b.veID)">
Edit
</NavLink>
<button class="btn btn-danger btn-sm"
@onclick="@(e => Deleteve(b))">
Delete
</button>
</td>

</tr>
}
}
else
{
<tr>
<td colspan="5" class="text-center">không có vé</td>
</tr>
}
</tbody></table>
<NavLink class="btn btn-primary" href="/admin/ves/create">tạo mới</NavLink>
@code {
public IdailyphongveRepository Repository => Service;
public IEnumerable<ve> veData { get; set; }
protected async override Task OnInitializedAsync()
{
await UpdateData();
}
public async Task UpdateData()
{
veData = await Repository.ves.ToListAsync();
}
public async Task Deleteve(ve b)
{
Repository.Deleteve(b);
await UpdateData();
}
public string GetDetailsUrl(long id) => $"/admin/ves/details/{id}";
public string GetEditUrl(long id) => $"/admin/ves/edit/{id}";
}